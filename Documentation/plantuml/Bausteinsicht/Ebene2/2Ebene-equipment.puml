@startuml

namespace ajb{
    namespace equipment {
        interface AbstractPart{
            +alter()
            +add(Substance substance)
            +getSubstanceContainer():SubstanceContainer
        }

        interface ExternalReagent{
            +getParent():AbstractPart
        }
        ExternalReagent ..|> AbstractPart
        ExternalReagent o--> AbstractPart

        abstract class SubstanceContainer implements AbstractPart {
            # {final} maxVolume: double
            #currentVolume: double = 0
            +clear();
            +SubstanceContainer(double maxVolume)
        }
        SubstanceContainer " # substance" -up-> .ajb.analysis.Substance

        class EquipmentFactory implements .ajb.miscellaneous.Singleton {
            +getSubstanceContainer(String substanceContainerClass):SubstanceContainer
            +getSubstanceContainer(Class substanceContainerClass):SubstanceContainer
            +getSubstanceContaienr(String substanceContainerClass, ajb.analysis.Substance substance):SubstanceContainer
            +getSubstanceContaienr(Class substanceContainerClass, ajb.analysis.Substance substance):SubstanceContainer
            +getExternalReagent(String ExternalReagentClass):ExternalReagent
            +getExternalReagent(Class ExternalReagentClass):ExternalReagent
            +getExternalReagent(String ExternalReagentClass, SubstanceContainer substanceContainer):ExternalReagent
            +getExternalReagent(Class ExternalReagentClass, SubstanceContainer substanceContainer):ExternalReagent
        }

        class AlterManager implements .ajb.miscellaneous.Singleton {
            -parts: List<ajb.analysis.Substance>
            ~AlterManager()
            +addPart(AbstractPart part)
            +removePart(AbstractPart part)
            ~startRunner()
        }
    }
}

@enduml